Dodo {
Program = Statement+
    
  Statement = Type id "=" Exp ";"                     -- declaration
  		     | If
             | function id "(" ParamDec ")"  Block -- fundec
             | Exp7_id "=" Exp ";"                         -- assign
             | break ";"                               --break
             | while "(" Exp ")" Block                  -- while
             | return Exp ";" 	                        -- return
             | print ":" Exp ";"                   -- print
           
  Exp        = Exp1 "?" Exp1 ":" Exp                    -- conditional
             | Exp1
  Exp1       = Exp2 ("&&" Exp2)+                        -- and
             | Exp2 ("||" Exp2)+                        -- or
             | Exp1a
  Exp1a      = Exp2 ("|" Exp2)+                         --bitor
             | Exp2 ("^" Exp2)+                         --bitxor
             | Exp2 ("&" Exp2)+                         --bitand
             | Exp2
  Exp2       = Exp3 ("<="|"<"|"=="|"!="|">="|">") Exp2a  -- binary
             | Exp2a
  Exp2a      = Exp2a ("<<" | ">>") Exp3                 -- shift
             | Exp3
  Exp3       = Exp3 ("+" | "-") Exp4                    -- binary
             | Exp4
  Exp4       = Exp4 ("*" | "/" | "%") Exp5              -- binary
             | Exp5
  Exp5       = Exp6 "**" Exp5                           -- binary
             | Exp6
  Exp6       = ("!" | "-") Exp6                         -- unary
             | Exp7
  Exp7       = 
             | true
             | false
             | doublelit
             | intlit 
             | Call
             | Exp7 ("[" | "?[") Exp "]"                --subscript
             | Exp7 ("." | "?.") id                     --member
             | stringlit
             | id                                       --id
             | Array
             | "(" Exp ")"                              -- parens
             
  Type	     = Type "[" "]"                             -- array
  		     | int 
             | boolean
             | double
             | string
             | id

  Array = "[" Elements "]"
  Block       = "{" Statement* "}"
  Call        = id "(" Args ")"
  If          = "pet" "(" Exp ")" Block ElseIf* Else?
  ElseIf      = "feed" "(" Exp ")" Block 
  Else        = "interact" Block
  FuncParam   = Type id
  ParamDec	  = ListOf<FuncParam, ","> --paramdec
  Params      = ListOf<id, ",">
  Args        = ListOf<Exp, ",">
  Elements    = NonemptyListOf<Exp, ",">
  function    = "action" ~idchar
  while       = "sleep" ~idchar
  break       = "break" ~alnum
  true        = "true" ~idchar
  false       = "false" ~idchar
  int         = "int" ~idchar
  boolean     = "boolean" ~idchar
  string      = "string" ~idchar
  double      = "double" ~idchar
  return 	  = "return" ~idchar
  print	 	  = "tweet" ~idchar
  keyword     =  while | true | false | int | string | double | boolean | function | print | break
  num         = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id          = ~keyword letter idchar*
  idchar      = letter | digit | "_"
  intlit      = digit+
  doublelit   = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
  stringlit   = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\")          --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}" --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit
  space       += "//" (~"\n" any)* ("\n" | end)         -- comment
}

